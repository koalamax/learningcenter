1. 객체 지향이란?
  - 현실 세계에서 우리가 바라보는 사물의 쓰임새가 각각 고유한 것 처럼
  - 예) 책, 차, 버스, ...
  - 프로그래밍에서도 목적에 따라 쓰임새를 각각 고유하게 정의한 것이 ‘객체(Object)’
  - 객체와 객체의 상호작용으로 프로그램이 동작하게 하는 것이 프로그래밍 하는 것이 ‘객체 지향 프로그래밍'

2. 객체란 ?
  - 고유한 쓰임새를 상태와 행위로 정의한 것
  - 상태 = 값 (필드) 행위 = 기능 (메서드)
  - 즉, 객체는 “필드(값)과 메서드(기능)으로 구성된 단위”
  - 객체 생성 전 형태를 클래스 (Class), 하나의 객체를 인스턴스 (Instance)라고 한다.

3. 클래스
  - 객체의 설계도, 
  - 설계도에 의해 만들어진 형태를 객체, 또는 클래스를 인스턴스화 했다고 함


4. Person class
  class Person { 
    String name;
    int age;

    void addOneYear() { 
      age++;
    }
  }


5. 접근 지정자
  - 이름앞에‘_’를 붙이면 외부에서 접근할수 없음
  - 붙이지 않으면 외부에서 접근할 수 있음

  class Person { 
    String name;
    int _age; // 외부에서 접근불가.

    void addOneYear() { 
      _age++;
    }
  }

6. 생성자
  - 기본 생성자는
    class Person {
      String name;
      int _age;
    }
    var person = Person();

  - class Person {
      String name;
      int _age;

      // 생성자
      Person({this.name, this._age}); 일때,
    }

    var person = Person(); // 선택 매개변수로 ok // ok
    var person = Person(name: ‘홍길동’, _age: 20);


7. 게터,세터 
  - class Person {
      String name;
      int _age;

      int get age => _age; 
    }

    var person = Person(); 
    print(person.age);


  - class Rectangle {
      num left, top, width, height;
      Rectangle(this.left, this.top, this.width, this.height);

      num get right => left + width;
      set right(num value) => left = value - width; 
      num get bottom => top + height;
      set bottom(num value) => top = value -height;
    }


8. 상속
  - 상속은? 부모가 자식에게 재산을물려주는것
  - class Hero {
      String name = ‘영웅’;
      void run() {} 
    }

  - class SuperHero extends Hero {
      @override 
      void run() {
        super.run();
        this.fly();
      }
      void fly() {}
    }

    void main() {
      var hero = SuperHero(); 
      hero.run();
      hero.fly(); print(hero.name);

  - 클래스 상속은?
    부모 클래스의 상태와 행위 즉, 고유함을 자식 클래스에게 물려주는 것
    예)도형←삼각형


9. 추상 클래스
  - 구현하지 않고 선언만 함.
  - abstract class Monster { 
      void attack();
    }
  - LLM: 추상 클래스가 필요한 이유는?

10.믹스인
  - with 키워드를 사용하면 상속하지 않고 다른 클래스의 기능을 가져오거나
    오버라이드 할 수 있음.
  - LLM: 객체지향 프로그래밍에서 믹스인이 필요한 이유?

  - 

11. 열거타입
  - 상수를 정의하는 특수한 형태의 클래스
  - LLM: 열거 타입을 사용하는 이유는 ?
  enum Status { login, logout }
  var authStatus = Status.logout;


12.컬렉션
  - List  [ 1, 2, 2, 3, 4, 5, 5, 6 ]
  - Map   { ‘한국’: ‘서울’, ‘일본’: ‘도쿄’, ‘중국’: ‘북경’ }
  - Set  { 1, 2, 3, 4, 5, 6 }

13. List 
  - 순서가 있는 연속된자료를 표현할때 사용함
  - List<String> items = [ ‘짜장’, ‘라면’, ‘볶음밥’ ];
  - var items = [ ‘짜장’, ‘라면’, ‘볶음밥’ ];
  - print(items[2]);
  - print(items[3]); // 에러!

14. 스프레드 연산자
  - var items = [‘짜장’, ‘라면’, ‘볶음밥’];
  - var items2 = [‘떡볶이’, ...items, ‘순대’]; // 떡볶이, 짜장, 라면, 볶음밥, 순대

15. Map
  - 키와값으로 쌍지어진 사전형태의 자료구조를 표현할때 사용함
  - Dictionary라고도 함

16. Set
  - 중복되지 않는 집합을 표현할 때 사용함
